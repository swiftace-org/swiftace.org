# Building a Custom JSX Runtime

[JSX](https://facebook.github.io/jsx/) is a syntax extension for JavaScript that lets you write HTML-like markup within a JavaScript file. It was first [introduced by React](https://legacy.reactjs.org/docs/introducing-jsx.html) and is now used by serveral web frameworks. JSX also lets you define custom "components" and use them like HTML tags [[1]](#note-1).

Here's an example of some JSX code in a React application ([see it live](https://playcode.io/2057322)):

```javascript
import { createRoot } from 'react-dom/client';

function Greeting({ name }) {
  return <h1>Hello, {name}!</h1>;
}

function App() {
  return (
    <div class="container">
      <Greeting name="World" />
      <p>Welcome to JSX</p>
    </div>
  );
}

createRoot(document.body).render(<App />);
```

We define a reusable JSX component `Greeting` which accepts a "prop" `name` and creates an `h1` heading [[2]](#note-2). Then, we define a component `App` which creates a `div` containing a `Greeting` and a paragraph. Finally, we "render" the `App` to the body of the HTML page [[3]](#note-3).

## How JSX Works

While JSX looks like HTML, under the hood JSX "nodes" transformed to plain JavaScript objects [[4]](#note-4). This is typically done by a compiler/bundler such as [TypeScript](https://www.typescriptlang.org/docs/handbook/jsx.html), [ESBuild](https://www.typescriptlang.org/docs/handbook/jsx.html), or [Deno](https://docs.deno.com/runtime/reference/jsx/). The code in the example above is tranformed to the following before execution:

```javascript
import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
import { createRoot } from "react-dom/client";

function Greeting({ name }) {
  return _jsxs("h1", { children: ["Hello, ", name, "!"] });
}

function App() {
  return _jsxs("div", {
    class: "container",
    children: [
      _jsx(Greeting, { name: "World" }),
      _jsx("p", { children: "Welcome to JSX" }),
    ],
  });
}

createRoot(document.body).render(_jsx(App, {}));
```

JSX nodes are replaced with calls to the functions `_jsx` and `_jsxs` imported from a framework-specific "JSX runtime" [[5]](#note-5). Both these functions accept three arguments:

1. `type`: The type (or name) of node to be created. JSX node names starting with lowercase letters (e.g. `div` or `p`) represent raw HTML tags and converted to strings. Names starting with uppercase letters (e.g. `Greeting` or `App`) represent components. 

2. `props`: Attributes passed to JSX nodes are collected into a `props` object as key-value pairs. The child node(s) of a node are included in a special prop `children`. The `_jsx` function is used for zero or one child, while `_jsxs` is used for two or more children.

3. `key` (optional): The attribute `key` is not included in `props`. Rather, it is passed as a third argument to the function. It typically represents a unique identifier for a node in a list. It is [used by React](https://react.dev/learn/rendering-lists) and other frameworks for efficient DOM updates. 

Objects created using a JSX runtime are turned into DOM nodes (in a browser) or HTML files (on a server) using a renderer. The `App` object created above using `react/jsx-runtime` is rendered into a browser's `document.body` using `createRoot` from `react-dom/client`.

## A Simple JSX Runtime

 Let's implement a minimal JSX runtime that turns JSX nodes into HTML strings.


TODO - Under the hood explanation

## A Simple JSX Runtime

TODO - Basic Implementation

## Server-Side Rendering

TODO - Show rendering functions

## Future Work

TODO - Talk about future work

## Conclusion

TODO - Include some conclusions

### Footnotes

1. <a id="note-1"></a> TODO - explain components  

2. <a id="note-2"></a> TODO - explain props

3. <a id="note-3"></a> TODO - explain rendering

4. <a id="note-4"></a> TODO - JSX nodes definition

5. <a id="note-5"></a> The mechanism describe above enables web frameworks to implement different strategies of parsing and rendering of JSX nodes under the hood, while using the same familiar syntax.
